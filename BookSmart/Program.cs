using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Converters;
using System.Text.RegularExpressions;
using Noggog;

namespace BookSmart
{
    // Sorry, I don't really know what I'm doing. Stop judging me.
    public class Program
    {

        static Lazy<Settings> LazySettings = new Lazy<Settings>();
        static Settings settings => LazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out LazySettings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "WeightlessThings.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            state.LoadOrder.PriorityOrder.OnlyEnabled().Book().WinningOverrides().ForEach(book =>
            {
                if (book.Teaches is IBookSkillGetter skillTeach)
                {
                    Console.WriteLine($"BOOK '{book.Name}' ({book.FormKey}) teaches: {skillTeach.Skill}");

                    // variables for use in this section
                    string newName = "Unknown";
                    string? skillName = "Unknown";
                    string open = "";
                    string close = "";

                    // set the open and close characters that go around the skill name
                    if (settings.encapsulatingCharacters == Settings.EncapsulatingCharacters.Chevrons) { open = "<"; close = ">"; }
                    else if (settings.encapsulatingCharacters == Settings.EncapsulatingCharacters.Curly_Brackets) { open = "{"; close = "}"; }
                    else if (settings.encapsulatingCharacters == Settings.EncapsulatingCharacters.Parenthesis) { open = "("; close = ")"; }
                    else if (settings.encapsulatingCharacters == Settings.EncapsulatingCharacters.Square_Brackets) { open = "["; close = "]"; }
                    else if (settings.encapsulatingCharacters == Settings.EncapsulatingCharacters.Stars) { open = "*"; close = "*"; }

                    // I hate myself for this next part
                    // Label Format: Long
                    if (settings.labelFormat == Settings.LabelFormat.Long)
                    {
                        if (skillTeach.Skill.ToString() == "HeavyArmor") { skillName = "Heavy Armor"; }
                        else if (skillTeach.Skill.ToString() == "LightArmor") { skillName = "Light Armor"; }
                        else if (skillTeach.Skill.ToString() == "OneHanded") { skillName = "One Handed"; }
                        else if (skillTeach.Skill.ToString() == "TwoHanded") { skillName = "Two Handed"; }
                        else { skillName = skillTeach.Skill.ToString(); }

                        newName = $"{open}{skillName}{close} {book.Name}";
                    }
                    // Label Format: Short
                    else if (settings.labelFormat == Settings.LabelFormat.Short)
                    {
                        if (skillTeach.Skill.ToString() == "Alchemy") { skillName = "Alch"; }
                        else if (skillTeach.Skill.ToString() == "Alteration") { skillName = "Altr"; }
                        else if (skillTeach.Skill.ToString() == "Archery") { skillName = "Arch"; }
                        else if (skillTeach.Skill.ToString() == "Block") { skillName = "Blck"; }
                        else if (skillTeach.Skill.ToString() == "Conjuration") { skillName = "Conj"; }
                        else if (skillTeach.Skill.ToString() == "Destruction") { skillName = "Dest"; }
                        else if (skillTeach.Skill.ToString() == "Enchanting") { skillName = "Ench"; }
                        else if (skillTeach.Skill.ToString() == "HeavyArmor") { skillName = "H.Arm"; }
                        else if (skillTeach.Skill.ToString() == "Illusion") { skillName = "Illu"; }
                        else if (skillTeach.Skill.ToString() == "LightArmor") { skillName = "L.Arm"; }
                        else if (skillTeach.Skill.ToString() == "Lockpicking") { skillName = "Lock"; }
                        else if (skillTeach.Skill.ToString() == "OneHanded") { skillName = "1H"; }
                        else if (skillTeach.Skill.ToString() == "Pickpocket") { skillName = "Pick"; }
                        else if (skillTeach.Skill.ToString() == "Restoration") { skillName = "Resto"; }
                        else if (skillTeach.Skill.ToString() == "Smithing") { skillName = "Smth"; }
                        else if (skillTeach.Skill.ToString() == "Sneak") { skillName = "Snk"; }
                        else if (skillTeach.Skill.ToString() == "Speech") { skillName = "Spch"; }
                        else if (skillTeach.Skill.ToString() == "TwoHanded") { skillName = "2H"; }
                        else { skillName = skillTeach.Skill.ToString(); }

                        newName = $"{open}{skillName}{close} {book.Name}";
                    }
                    // Label Format: Star
                    else if (settings.labelFormat == Settings.LabelFormat.Star)
                    {
                        newName = $"*{book.Name}";
                    }

                    // Actually create the override record
                    var bookOverride = state.PatchMod.Books.GetOrAddAsOverride(book);
                    bookOverride.Name = newName;
                    Console.WriteLine($"Renamed to: '{bookOverride.Name}'");
                }
            });
        }
    }
}
